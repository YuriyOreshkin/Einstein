@model Einstein.WebUI.Models.EventViewModel
@{
    ViewBag.Title = "Таблица";
}
<script src="@Url.Content("~/Scripts/jquery.signalR-2.4.1.min.js")"></script>
<script src="@Url.Content("~/signalr/hubs")"></script>

@Scripts.Render("~/Scripts/order.js")

@*<h2>Заявки на посещение мероприятий</h2>*@

@(Html.Kendo().Grid<Einstein.WebUI.Models.OrderViewModel>()
    .Name("gridOrders")
    .HtmlAttributes(new { @class = "data-view", style = "height:calc(100vh - 40px);" })
    .ToolBar(toolbar =>
    {

        toolbar.Create();
        toolbar.Excel();
    })
    .Columns(columns =>
    {
        columns.Bound(p => p.dateorder).Format("{0:dd.MM.yyyy HH:mm}").Width(150).ClientFooterTemplate("Всего:").Groupable(false);
        columns.Group(gr => gr
            .Title("Мероприятие")
            .Columns(cl =>
            {
                cl.Bound(p => p.eventname).Title("Наименование").MinResizableWidth(200).Filterable(ftb => ftb.Multi(true)).ClientFooterTemplate("<span>#=count#</span><span id='new-orders-count' class='new-count'>0</span>").ClientGroupHeaderColumnTemplate("#= count#");
                cl.Bound(p => p.dateevent).Title("Дата").Format("{0:dd.MM.yyyy}").Width(150).ClientGroupHeaderTemplate("Дата мероприятия: #= kendo.toString(kendo.parseDate(value), 'dd.MM.yyyy') #");
                cl.Bound(p => p.timeevent).Title("Время").Filterable(ftb => ftb.Multi(true)).Width(150);
            }));
        columns.Group(gr => gr
            .Title("Посетителей")
            .Columns(cl =>
            {

                cl.Bound(p => p.persons).Title("Всего").Width(100).ClientGroupHeaderColumnTemplate("#=sum#").ClientFooterTemplate("#=sum#").Groupable(false);
                cl.Bound(p => p.persons14).Title("до 14").Width(100).ClientGroupHeaderColumnTemplate("#=sum#").ClientFooterTemplate("#=sum#").Groupable(false);
            })
            );
        columns.Bound(p => p.prepay).Width(150).Groupable(false).ClientGroupHeaderColumnTemplate("#=sum#").ClientFooterTemplate("#=sum#");
        columns.Bound(p => p.email).Width(230).Groupable(false);
        columns.Bound(p => p.phonenumber).ClientTemplate("<a href='tel:#=phonenumber#'>#=MaskPhone(phonenumber)#</a>").Width(190).Groupable(false);
        columns.Bound(p => p.description).Title("").Width(60).ClientTemplate("<div #if(description) {# class='display-tooltip' title='#=description#' #}# style='text-align: center;vertical-align: middle;'><span class='k-icon k-i-comment' style='font-size:24px; #if(!description) {# color: \\#656565; # }else{# color: \\#d51923; #} #'></span></div>");
        columns.Bound(p => p.inform).Title("").Width(60).ClientTemplate("<div style='text-align: center;vertical-align: middle;'><a class='action-notification' title='Отправить уведомление' href='\\#'><span class='k-icon k-i-email' style='font-size:24px; #if(inform) {# color: \\#656565; # }else{# color: \\#d51923; #} #'></span></a></div>");
        columns.Command(commands =>
        {
            commands.Edit();
            commands.Destroy();
        }).Width(250);
    })

    .Excel(excel =>excel.FileName("Список заявок.xlsx").AllPages(true).ForceProxy(true).ProxyURL(Url.Action("Excel_Export_Save", "OrderService")))
    .Events(ev => ev.Edit("onGridOrdersEdit").ExcelExport("onExcelExport"))
    .Sortable()
    .Scrollable()
    .Editable(edit => edit.Mode(GridEditMode.PopUp).TemplateName("Order").Window(wnd=>wnd.Width(600).Events(ev=>ev.Open("onPopUpOpen"))))
    .Pageable(pag => pag.Refresh(true).PageSizes(new[] { 10, 25, 50, 100 }).Input(true).ButtonCount(5))
    .Resizable(r => r.Columns(true))
    .Groupable()
    .Mobile(MobileMode.Auto)
    .Filterable()
    .DataSource(dataSource => dataSource
    .Ajax()
    .Aggregates(aggregates =>
    {
        aggregates.Add(p => p.eventname).Count();
        aggregates.Add(p => p.persons).Sum();
        aggregates.Add(p => p.persons14).Sum();
        aggregates.Add(p => p.prepay).Sum();
    })
    .Sort(s => s.Add(f => f.dateorder).Descending())
    .Filter(f =>
    {
        if (Model.TaskID != 0 || Model.RecurrenceID != null)
        {
            f.Add(ev => ev.eventname).IsEqualTo(Model.Title);
            f.Add(ev => ev.dateevent).IsEqualTo(Model.Start.Date);
            f.Add(ev => ev.timeevent).IsEqualTo(Model.Start.ToString("HH:mm") + " - " + Model.End.ToString("HH:mm"));
        }

    })
    .PageSize(50)
    //.ServerOperation(false)
    .Model(model =>
    {
        model.Id(p => p.id);
        model.Field(p => p.eventname).DefaultValue(Model.Title);
        model.Field(p => p.dateevent).DefaultValue(Model.Start.Date);
        model.Field(p => p.eventid).DefaultValue(Model.TaskID);
        model.Field(p => p.freeplaces).DefaultValue(Model.FreePlaces);
        model.Field(p => p.freeplaces14).DefaultValue(Model.FreePlaces14);
        model.Field(p => p.timeevent).DefaultValue(Model.Start.ToString("HH:mm") + " - " + Model.End.ToString("HH:mm"));

    })
    .PageSize(50)
    .Read(read => read.Action("ReadGrid", "OrderService"))
    .Create(update => update.Action("CreateForGrid", "OrderService"))
    .Update(update => update.Action("UpdateForGrid", "OrderService"))
    .Destroy(update => update.Action("DestroyForGrid", "OrderService"))
    .Events(events => events.Error("error_handler"))

    )

    )
@(Html.Kendo().Tooltip()
        .For("#gridOrders")
        .Filter(".display-tooltip")
        .Position(TooltipPosition.Top)
    )

<script>
        $(function () {

            var notificationhub = $.connection.ordersHub;

            notificationhub.client.displayAddOrder = function (message) {

                showInfo(message);
                var value = getValueCountNewOrders() + 1;

                setValueCountNewOrders(value);

            };

            $.connection.hub.start();

        });


        $(document).on("click", ".action-notification", function (e) {
            e.preventDefault();
            var grid = $("#gridOrders").data("kendoGrid");
            var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                type: "POST",
                url: "@Url.Action("SendNotification", "OrderService")",
                datatype: 'json',
                data:  JSON.parse(JSON.stringify(dataItem)),
                success: function (data) {

                    if (data.message == "OK") {
                        dataItem.set("inform", true)
                        grid.dataSource.pushUpdate(dataItem);
                        showSuccess(data.result);

                    }
                    else {
                        dataItem.set("inform", false)
                        grid.dataSource.pushUpdate(dataItem);
                        showError(data.result);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {

                     showError(xhr.status + " " + thrownError);
                    }
            });

        });

        $(document).ready(function () {

            $(window).resize();
            //Footer on Top
            $(".k-grid-footer").insertAfter(".k-grid-header");
        });


        function MaskPhone(phonenumber) {

            var code = phonenumber.substring(0, 2);
            var piece1 = phonenumber.substring(2, 5); //123
            var piece2 = phonenumber.substring(5, 8); //456
            var piece3 = phonenumber.substring(8); //7890

            return kendo.format("{0}({1}) {2}-{3}",code, piece1, piece2, piece3);
        }

        function resizeGrid(height) {
            content.css("height", height);
        }


        function setSGridHeight(height) {
            var widget = $("#gridOrders").data("kendoGrid");
            widget.element.height(height);
            widget.resize(true);
        }


        $(window).resize(function () {

            var height = $(window).outerHeight()-40;
            setSGridHeight(height);
        });


        function onExcelExport(e) {

            var sheet = e.workbook.sheets[0];
           
            for (var i = 0; i < sheet.rows.length; i++) {
                if (sheet.rows[i].type == "header") {
                    var header = sheet.rows[i];
                    for (var cellIndex = 0; cellIndex < header.cells.length; cellIndex++) {
                        var val = header.cells[cellIndex].value;
                        if (val == 'description') {
                            header.cells[cellIndex].value = "Примечание";
                        }
                        if (val == 'inform') {
                            header.cells[cellIndex].value = "?Уведомление";
                            sheet.columns[10].width = 0
                        }
                    }
                }
                if (sheet.rows[i].type == "footer") {
                    var total = sheet.rows[i];
                    
                    for (var cellIndex = 0; cellIndex < total.cells.length; cellIndex++) {
                        var val = total.cells[cellIndex].value;
                        if (val) {
                            if (val.indexOf(">") > 0) {
                                var count = val.substring(val.indexOf(">") + 1, val.indexOf("</"));
                                total.cells[cellIndex].value = count;
                            }
                        }
                    }
                }
            }
        }

        function onPopUpOpen(e)
        {
            this.wrapper.css({ top: 30 });
        }

        function onGridOrdersEdit(e) {


            if (!e.model.isNew()) {

                e.model.freeplaces = e.model.freeplaces + e.model.persons;
                e.model.freeplaces14 = e.model.freeplaces14 + e.model.persons14;

                e.model.freeplaces14 = SetFreePlaces14(e.model.freeplaces, e.model.freeplaces14);

            }

            var numeric = e.container.find("input[name=persons]");
            SetMaxNumerictextbox(numeric, e.model.freeplaces);
            numeric = e.container.find("input[name=persons14]");
            console.l
            SetMaxNumerictextbox(numeric, e.model.freeplaces14);


            $("#freeplaces-view").text(e.model.freeplaces);
            $("#freeplaces14-view").text(e.model.freeplaces14);

            $(".field-hidden").each(function () {
                $(this).show();
            });

        }

        //Show Errors
        function error_handler(e) {
            if (e.errors) {
                var message = "<strong>Ошибки:</strong>";
                message += "<ul>"
                $.each(e.errors, function (key, value) {

                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += "<li>" + this + "<br></li>";
                        });
                    }
                });
                message += "</ul>"
                showError(message);
                this.cancelChanges();
            }
        }

        function getValueCountNewOrders() {
            var value = $("#new-orders-count").text();
            return +value;
        }

        function setValueCountNewOrders(value) {
            $("#new-orders-count").text("+" + value);

            if (value == 0) {
                //Hide
                $("#new-orders-count").hide();

            } else {
                //Show

                $("#new-orders-count").show();
            }
        }

</script>
<style>
    .k-header .k-link {
        text-align: center;
    }

    .k-edit-form-container {
        width: 100%;
    }

    .new-count {
        display: none;
        padding: 1px 4px;
        border: 1px solid #fafafa;
        color: #fff;
        background-color: #ff6358; /*#ff734c;*/
        text-align: center;
        margin-left: 5px;
    }
</style>
