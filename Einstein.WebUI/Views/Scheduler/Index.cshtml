
@{
    ViewBag.Title = "Календарь";
}

<h2>Календарь мероприятий</h2>

<div class="inner-section">
    @(Html.Kendo().Scheduler<Einstein.WebUI.Models.EventViewModel>()
                .Name("scheduler")
                .Toolbar(t => t.Pdf())
                .StartTime(new DateTime(2020, 1, 1, 7, 00, 00))
                .WorkDayStart(new DateTime(2020, 1, 1, 8, 00, 00))
                .WorkDayEnd(new DateTime(2020, 1, 1, 18, 00, 00))
                .MajorTimeHeaderTemplate("#=kendo.toString(date, 'HH:mm')#")
                .Views(views =>
                {
                    views.DayView(d => d.DateHeaderTemplate("#=kendo.toString(date, 'dddd dd.MM.yyyy')#"));
                    views.WeekView(w=>w.Selected(true).DateHeaderTemplate("#=kendo.toString(date, 'ddd dd.MM.yyyy')#"));
                    views.MonthView();
                    views.AgendaView();

                })

                .Pdf(pdf=>pdf.FileName("Расписание мероприятий.pdf").Title("Расписание мероприятий"))
                .EventTemplateId("eventTemplate")
                .Timezone("W-SU")
                //.Events(ev=>ev.("onDataBound"))
                //.Selectable(true)
                .DataSource(d => d
                    .Model(m =>
                    {
                        m.Id(f => f.TaskID);
                        m.Field(f => f.Title).DefaultValue("");
                        m.Field(f => f.MaxPersons).DefaultValue(1);
                        m.RecurrenceId(f => f.RecurrenceID);
                    })
                    .Read("Read", "SchedulerService")
                    .Create("Create", "SchedulerService")
                    .Destroy("Destroy", "SchedulerService")
                    .Update("Update", "SchedulerService")
                    .Events(events => events.Error("error_handler"))
                //.Filter(filters =>
                //{
                //    filters.Add(model => model.Category)
                //        .IsEqualTo(1);
                //})
                )

                 .Editable(editable => {
                     editable.TemplateName("Scheduler");
                     editable.Move(false); })
                //.Resources(resource =>
                //{
                //    resource.Add(m => m.Category)
                //        .Title("Category")
                //        .DataTextField("Text")
                //        .DataValueField("Value")
                //        .DataColorField("Color")
                //        .BindTo(new[] {
                //    new { Text = "Personal", Value = 1, Color = "#6BCC65" } ,
                //    new { Text = "Work", Value = 2, Color = "#1E8EDF" } ,
                //    new { Text = "Development", Value = 3, Color = "#E155D9" } ,
                //    new { Text = "Design", Value = 4, Color = "#DD1C3C" } ,
                //    new { Text = "Marketing", Value = 5, Color = "#FFC600" }
                //        });
                //})
                //.Events(e => e.Edit("onSchedulerEdit").Change("onSchedulerChange")
                )

</div>
<script id="eventTemplate" type="text/x-kendo-template">
    <div class='event-template #if(FreePlaces > 0){# enable-background #}else{# disable-background #}#'>
                @*<span>#= start#</span>*@
                <span class='title'>#= title#</span>
                <p>
                 <span class="k-icon  k-i-user"></span><span>#=MaxPersons-FreePlaces# </span>
                 <span class="k-icon  k-i-checkbox"></span><span>#=FreePlaces# </span>
               </p>
    </div>
</script>
<script>

    function onDataBound(e) {
        var view = this.view();
        var events = this.dataSource.view();
        var eventElement;
        var event;

        for (var idx = 0, length = events.length; idx < length; idx++) {
            event = events[idx];
            console.log(event);
            if (event.start < new Date(2021, 10, 27)) {
                // Get the event element.
                eventElement = view.element.find("[data-uid=" + event.uid + "]");

                // Set the background of the element.
                eventElement.css("background-color", "red");
            }
        }
    }
    //Show Errors
    function error_handler(e) {
        if (e.errors) {
            var message = "<strong>Ошибки:</strong>";
            message += "<ul>"
            $.each(e.errors, function (key, value) {

                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += "<li> " + this + " <br></li> ";
                    });
                }
            });
            message += "</ul> "
            showError(message);
            this.cancelChanges();
        }
    }
</script>
<style>
    .event-template {
        border-style: solid;
        border-width: 2px;
        border-radius: 3px;
        height: 100%;
    }
    .disable-background {
        background: #747272;
        border-color: #747272;
    }
    .enable-background {
        background: #6BCC65;
        border-color: #6BCC65;
    }
    .event-template .title {
        padding: 0 8px 5px;
        
    }
    .k-event {
        background: none;
        border: none;
    }
</style>
