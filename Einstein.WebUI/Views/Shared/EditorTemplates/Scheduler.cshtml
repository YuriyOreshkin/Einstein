@model Einstein.WebUI.Models.EventViewModel



@functions{
    public Dictionary<string, object> generateDatePickerAttributes(
           string elementId,
           string fieldName,
           string dataBindAttribute,
           Dictionary<string, object> additionalAttributes = null)
    {

        Dictionary<string, object> datePickerAttributes = additionalAttributes != null ? new Dictionary<string, object>(additionalAttributes) : new Dictionary<string, object>();

        datePickerAttributes["id"] = elementId;
        datePickerAttributes["name"] = fieldName;
        datePickerAttributes["data-bind"] = dataBindAttribute;
        datePickerAttributes["required"] = "required";
        datePickerAttributes["style"] = "z-index: inherit;";

        return datePickerAttributes;
    }
}


<div id="scheduler-edit-form" style="height:550px; margin-top:10px; ">
    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.Title))
    </div>
    <div data-container-for="title" class="k-edit-field task-edit-box">
        @Html.TextBoxFor(model => model.Title, new { @class = "k-textbox", data_bind = "value:title", style = "width:100%;" })
    </div>

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.Start))
    </div>
    <div data-container-for="start" class="k-edit-field task-edit-box">

        @(Html.Kendo().DateTimePickerFor(model => model.Start).Interval(15).HtmlAttributes(generateDatePickerAttributes("startDateTime", "start", "value:start,invisible:isAllDay")))
        @(Html.Kendo().DatePickerFor(model => model.Start).HtmlAttributes(generateDatePickerAttributes("startDate", "start", "value:start,visible:isAllDay")))

        <span data-bind="text: startTimezone"></span>
        <span data-for="start" class="k-invalid-msg"></span>
    </div>

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.End))
    </div>
    <div data-container-for="end" class="k-edit-field task-edit-box">
        @(Html.Kendo().DateTimePickerFor(model => model.End).Interval(15).HtmlAttributes(generateDatePickerAttributes("endDateTime","end","value:end,invisible:isAllDay",new Dictionary<string, object>() { { "data-dateCompare-msg", "Дата окончания должная быть больше или равна дате начала" } })))
        @(Html.Kendo().DatePickerFor(model => model.End).HtmlAttributes(generateDatePickerAttributes("endDate","end","value:end,visible:isAllDay",new Dictionary<string, object>() { { "data-dateCompare-msg", "Дата окончания должная быть больше или равна дате начала" } })))
        <span data-bind="text: endTimezone"></span>
        <span data-for="end" class="k-invalid-msg"></span>
    </div>

    @*<div class="k-edit-label task-edit-label">
            @(Html.LabelFor(model => model.IsAllDay))
        </div>
        <div data-container-for="isAllDay" class="k-edit-field task-edit-box">
            <input data-bind="checked: isAllDay" data-val="true" id="IsAllDay" name="IsAllDay" type="checkbox" />
        </div>*@

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.RecurrenceRule))
    </div>
    <div data-container-for="recurrenceRule" class="k-edit-field task-edit-box">
        @(Html.Kendo().RecurrenceEditorFor(model => model.RecurrenceRule).Timezone("W-SU").Messages(mes =>
                                    {
                                        mes.Daily(d => d.Interval("дней").RepeatEvery("Повторять каждые:"));
                                        mes.End(end => end.After("После").Occurrence("входит").Label("Конец:").Never("Никогда").On("В").MobileLabel("Окончание"));
                                        mes.Frequencies(f => f.Daily("Ежедневно").Monthly("Ежемесячно").Never("Никогда").Weekly("Еженедельно").Yearly("Ежегодно"));
                                        mes.Monthly(m => m.Day("День").Interval("месяцы").RepeatEvery("Повторять каждый:").RepeatOn("Повторение:"));
                                        mes.OffsetPositions(off => off.First("первый").Fourth("четвертый").Last("последний").Second("второй").Third("третий"));
                                        mes.Weekly(w => w.RepeatEvery("Повторять каждую:").RepeatOn("Повторение:").Interval("неделя"));
                                        mes.Yearly(y => y.Of("из").RepeatEvery("Повторять каждый:").RepeatOn("Повторение:").Interval("годы"));
                                        mes.Weekdays(wd => wd.Day("день").Weekday("будний").Weekend("выходной"));
                                    }).HtmlAttributes(new { data_bind = "value:recurrenceRule" }))
    </div>

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.Description))
    </div>
    <div data-container-for="description" class="k-edit-field task-edit-box">
        @(Html.TextAreaFor(model => model.Description, new { @class = "k-textbox", data_bind = "value:description" }))
    </div>
    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.MaxPersons))
    </div>
    <div data-container-for="MaxPersons" class="k-edit-field task-edit-box">
        @Html.Kendo().NumericTextBoxFor(m => m.MaxPersons).Format("n0").Events(ev => ev.Change("onMaxPersonsChange")).Min(Model.Persons > 0 ? Model.Persons : 1).Decimals(0).HtmlAttributes(new { style = "width: 100%;" })
    </div>
        @*<div data-container-for="MaxPersons" class="k-edit-field task-edit-box">
                <div style="display: inline-block; width: 49%;">
                    <label for="MaxPersons">Всего</label>
                    @Html.Kendo().NumericTextBoxFor(m => m.MaxPersons).Format("n0").Events(ev => ev.Change("onMaxPersonsChange")).Min(Model.Persons > 0 ? Model.Persons : 1).Decimals(0).HtmlAttributes(new { style = "width: 100%;" })
                </div>
                <div style="display: inline-block; float:right;  width: 49%;">
                    <label for="MaxPersons14">Дети до 14</label>
                    @Html.Kendo().NumericTextBoxFor(m => m.MaxPersons14).Format("n0").Min(0).Decimals(0).HtmlAttributes(new { style = "width: 100%;" })
                </div>
                <span class="k-invalid-msg" data-for="MaxPersons14"></span>
            </div>*@
        <div class="k-edit-label task-edit-label">
            @(Html.LabelFor(model => model.Price))
        </div>
        <div data-container-for="Price" class="k-edit-field task-edit-box">
            @Html.Kendo().CurrencyTextBoxFor(m => m.Price).Min(0).HtmlAttributes(new { style = "width: 100%;" })
        </div>

        <style>
            .task-edit-label {
                text-align: left;
                padding: 3px 0;
            }
        </style>


