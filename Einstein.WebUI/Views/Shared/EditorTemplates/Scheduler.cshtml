@model Einstein.WebUI.Models.EventViewModel



@functions{
    public Dictionary<string, object> generateDatePickerAttributes(
           string elementId,
           string fieldName,
           string dataBindAttribute,
           Dictionary<string, object> additionalAttributes = null)
    {

        Dictionary<string, object> datePickerAttributes = additionalAttributes != null ? new Dictionary<string, object>(additionalAttributes) : new Dictionary<string, object>();

        datePickerAttributes["id"] = elementId;
        datePickerAttributes["name"] = fieldName;
        datePickerAttributes["data-bind"] = dataBindAttribute;
        datePickerAttributes["required"] = "required";
        datePickerAttributes["style"] = "z-index: inherit;";

        return datePickerAttributes;
    }
}

<style>
    .task-edit-label {
        padding: 10px 0 0 0;
    }

    .task-edit-box {
        padding: 2px;
    }
</style>


<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.Title))
</div>
<div data-container-for="title" class="k-edit-field task-edit-box">
    @Html.TextBoxFor(model => model.Title, new { @class = "k-textbox", data_bind = "value:title", style = "width:100%;" })
</div>

<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.Start))
</div>
<div data-container-for="start" class="k-edit-field task-edit-box">

    @(Html.Kendo().DateTimePickerFor(model => model.Start).HtmlAttributes(generateDatePickerAttributes("startDateTime", "start", "value:start,invisible:isAllDay")))

    @(Html.Kendo().DatePickerFor(model => model.Start).HtmlAttributes(generateDatePickerAttributes("startDate", "start", "value:start,visible:isAllDay")))

    <span data-bind="text: startTimezone"></span>
    <span data-for="start" class="k-invalid-msg"></span>
</div>

<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.End))
</div>
<div data-container-for="end" class="k-edit-field task-edit-box">

    @(Html.Kendo().DateTimePickerFor(model => model.End)
                                                                                        .HtmlAttributes(generateDatePickerAttributes(
                                                                                            "endDateTime",
                                                                                            "end",
                                                                                            "value:end,invisible:isAllDay",
                                                                                            new Dictionary<string, object>() { { "data-dateCompare-msg", "Дата окончания должная быть больше или равна дате начала" } })))

    @(Html.Kendo().DatePickerFor(model => model.End)
                                                                                        .HtmlAttributes(generateDatePickerAttributes(
                                                                                            "endDate",
                                                                                            "end",
                                                                                            "value:end,visible:isAllDay",
                                                                                            new Dictionary<string, object>() { { "data-dateCompare-msg", "Дата окончания должная быть больше или равна дате начала" } })))

    <span data-bind="text: endTimezone"></span>
    <span data-for="end" class="k-invalid-msg"></span>
</div>

<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.IsAllDay))
</div>
<div data-container-for="isAllDay" class="k-edit-field task-edit-box">
    <input data-bind="checked: isAllDay" data-val="true" id="IsAllDay" name="IsAllDay" type="checkbox" />
</div>

<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.RecurrenceRule))
</div>
<div data-container-for="recurrenceRule" class="k-edit-field task-edit-box">
    @(Html.Kendo().RecurrenceEditorFor(model => model.RecurrenceRule).HtmlAttributes(new { data_bind = "value:recurrenceRule" }))
</div>

<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.Description))
</div>
<div data-container-for="description" class="k-edit-field task-edit-box">
    @(Html.TextAreaFor(model => model.Description, new { @class = "k-textbox", data_bind = "value:description" }))
</div>
<div class="k-edit-label task-edit-label">
    @(Html.LabelFor(model => model.MaxPersons))
</div>
<div data-container-for="description" class="k-edit-field task-edit-box" style="float:right;">
    @Html.Kendo().NumericTextBoxFor(m => m.MaxPersons).Format("n0").Min(1).Decimals(0)
</div>

@*<div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.CategoriesID))
    </div>
    <div data-container-for="CategoriesID" class="k-edit-field task-edit-box">
        @(Html.Kendo().DropDownListFor(model => model.CategoriesID)
                                                    .HtmlAttributes(new { data_bind = "value:CategoriesID", style = "width: 100%;" })
                                                    .DataTextField("Text")
                                                    .DataValueField("Value")
                                                    .ValuePrimitive(true)
                                                    .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                                           .DataSource(ds => ds
                                               .Custom()
                                               //Required in order to work with ToDataSourceResult
                                               .Type("aspnetmvc-ajax")
                                               .Transport(transport => transport.Read(read => read.Action("Read_Categories", "Home")))
                                               .Schema(schema => schema
                                                   //Required in order to work with ToDataSourceResult
                                                   .Data("Data")
                                                   .Total("Total")
                                                   .Errors("Errors")
                                                   .Model(model =>
                                                   {
                                                       model.Id("Value");
                                                       model.Field("Value", typeof(long));
                                                       model.Field("Text", typeof(string));
                                                       model.Field("Color", typeof(string));
                                                   })

                                               )
                                           ).ToClientTemplate()
        )
    </div>

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.StatusID))
    </div>
    <div data-container-for="StatusID" class="k-edit-field task-edit-box">
        @(Html.Kendo().DropDownListFor(model => model.StatusID)
                                                    .HtmlAttributes(new { data_bind = "value:StatusID", style = "width: 100%;" })
                                                    .DataTextField("Text")
                                                    .DataValueField("Value")
                                                    .ValuePrimitive(true)
                                                    .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                                           .DataSource(ds => ds
                                               .Custom()
                                               //Required in order to work with ToDataSourceResult
                                               .Type("aspnetmvc-ajax")
                                               .Transport(transport => transport.Read(read => read.Action("Read_Statuses", "Home")))
                                               .Schema(schema => schema
                                                   //Required in order to work with ToDataSourceResult
                                                   .Data("Data")
                                                   .Total("Total")
                                                   .Errors("Errors")
                                                   .Model(model =>
                                                   {
                                                       model.Id("Value");
                                                       model.Field("Value", typeof(long));
                                                       model.Field("Text", typeof(string));
                                                       model.Field("Color", typeof(string));
                                                   })

                                               )
                                           ).ToClientTemplate()
        )
    </div>

    <div class="k-edit-label task-edit-label">
        @(Html.LabelFor(model => model.PriorityID))
    </div>
    <div data-container-for="PriorityID" class="k-edit-field task-edit-box">
        @(Html.Kendo().DropDownListFor(model => model.PriorityID)
                                                    .HtmlAttributes(new { data_bind = "value:PriorityID", style = "width: 100%;" })
                                                    .DataTextField("Text")
                                                    .DataValueField("Value")
                                                    .ValuePrimitive(true)
                                                    .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                                           .DataSource(ds => ds
                                               .Custom()
                                               //Required in order to work with ToDataSourceResult
                                               .Type("aspnetmvc-ajax")
                                               .Transport(transport => transport.Read(read => read.Action("Read_Priority", "Home")))
                                               .Schema(schema => schema
                                                   //Required in order to work with ToDataSourceResult
                                                   .Data("Data")
                                                   .Total("Total")
                                                   .Errors("Errors")
                                                   .Model(model =>
                                                   {
                                                       model.Id("Value");
                                                       model.Field("Value", typeof(long));
                                                       model.Field("Text", typeof(string));
                                                       model.Field("Color", typeof(string));
                                                   })

                                               )
                                           ).ToClientTemplate()
        )
    </div>*@




